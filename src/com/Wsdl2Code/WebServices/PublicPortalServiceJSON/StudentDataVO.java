package com.Wsdl2Code.WebServices.PublicPortalServiceJSON;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 6/12/2014 1:13:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorActivityVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorAsmtCatVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorAssignmentScoreVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorAssignmentVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorAttendanceVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorAttendanceCodeVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorBulletinLite;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorCitizenCodeVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorCitizenGradeVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorCourseRequestVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorSectionEnrollmentVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.FeeBalanceVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorFeeTransactionVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorFeeTypeVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorFinalGradeVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorGradeScaleVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorLunchTransactionVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorNotInSessionDayVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.NotificationSettingsVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorPeriodVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorReportingTermVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorSchoolVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorSectionVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorStandardVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorStandardGradeVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.StudentVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorTeacherVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorTermVO;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class StudentDataVO implements KvmSerializable {
    
    public VectorActivityVO activities;
    public VectorAsmtCatVO assignmentCategories;
    public VectorAssignmentScoreVO assignmentScores;
    public VectorAssignmentVO assignments;
    public VectorAttendanceVO attendance;
    public VectorAttendanceCodeVO attendanceCodes;
    public VectorBulletinLite bulletins;
    public VectorCitizenCodeVO citizenCodes;
    public VectorCitizenGradeVO citizenGrades;
    public VectorCourseRequestVO courseRequests;
    public VectorSectionEnrollmentVO enrollments;
    public FeeBalanceVO feeBalance;
    public VectorFeeTransactionVO feeTransactions;
    public VectorFeeTypeVO feeTypes;
    public VectorFinalGradeVO finalGrades;
    public VectorGradeScaleVO gradeScales;
    public VectorLunchTransactionVO lunchTransactions;
    public VectorNotInSessionDayVO notInSessionDays;
    public NotificationSettingsVO notificationSettingsVO;
    public VectorPeriodVO periods;
    public VectorReportingTermVO reportingTerms;
    public VectorSchoolVO schools;
    public VectorSectionVO sections;
    public VectorStandardVO standards;
    public VectorStandardGradeVO standardsGrades;
    public StudentVO student;
    public long studentDcid;
    public boolean studentDcidSpecified;
    public long studentId;
    public boolean studentIdSpecified;
    public VectorTeacherVO teachers;
    public VectorTermVO terms;
    public int yearId;
    public boolean yearIdSpecified;
    
    public StudentDataVO(){}
    
    public StudentDataVO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("activities"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("activities");
            activities = new VectorActivityVO(j);
        }
        if (soapObject.hasProperty("assignmentCategories"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("assignmentCategories");
            assignmentCategories = new VectorAsmtCatVO(j);
        }
        if (soapObject.hasProperty("assignmentScores"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("assignmentScores");
            assignmentScores = new VectorAssignmentScoreVO(j);
        }
        if (soapObject.hasProperty("assignments"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("assignments");
            assignments = new VectorAssignmentVO(j);
        }
        if (soapObject.hasProperty("attendance"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("attendance");
            attendance = new VectorAttendanceVO(j);
        }
        if (soapObject.hasProperty("attendanceCodes"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("attendanceCodes");
            attendanceCodes = new VectorAttendanceCodeVO(j);
        }
        if (soapObject.hasProperty("bulletins"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("bulletins");
            bulletins = new VectorBulletinLite(j);
        }
        if (soapObject.hasProperty("citizenCodes"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("citizenCodes");
            citizenCodes = new VectorCitizenCodeVO(j);
        }
        if (soapObject.hasProperty("citizenGrades"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("citizenGrades");
            citizenGrades = new VectorCitizenGradeVO(j);
        }
        if (soapObject.hasProperty("courseRequests"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("courseRequests");
            courseRequests = new VectorCourseRequestVO(j);
        }
        if (soapObject.hasProperty("enrollments"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("enrollments");
            enrollments = new VectorSectionEnrollmentVO(j);
        }
        if (soapObject.hasProperty("feeBalance"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("feeBalance");
            feeBalance =  new FeeBalanceVO (j);
            
        }
        if (soapObject.hasProperty("feeTransactions"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("feeTransactions");
            feeTransactions = new VectorFeeTransactionVO(j);
        }
        if (soapObject.hasProperty("feeTypes"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("feeTypes");
            feeTypes = new VectorFeeTypeVO(j);
        }
        if (soapObject.hasProperty("finalGrades"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("finalGrades");
            finalGrades = new VectorFinalGradeVO(j);
        }
        if (soapObject.hasProperty("gradeScales"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("gradeScales");
            gradeScales = new VectorGradeScaleVO(j);
        }
        if (soapObject.hasProperty("lunchTransactions"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("lunchTransactions");
            lunchTransactions = new VectorLunchTransactionVO(j);
        }
        if (soapObject.hasProperty("notInSessionDays"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("notInSessionDays");
            notInSessionDays = new VectorNotInSessionDayVO(j);
        }
        if (soapObject.hasProperty("notificationSettingsVO"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("notificationSettingsVO");
            notificationSettingsVO =  new NotificationSettingsVO (j);
            
        }
        if (soapObject.hasProperty("periods"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("periods");
            periods = new VectorPeriodVO(j);
        }
        if (soapObject.hasProperty("reportingTerms"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("reportingTerms");
            reportingTerms = new VectorReportingTermVO(j);
        }
        if (soapObject.hasProperty("schools"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("schools");
            schools = new VectorSchoolVO(j);
        }
        if (soapObject.hasProperty("sections"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("sections");
            sections = new VectorSectionVO(j);
        }
        if (soapObject.hasProperty("standards"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("standards");
            standards = new VectorStandardVO(j);
        }
        if (soapObject.hasProperty("standardsGrades"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("standardsGrades");
            standardsGrades = new VectorStandardGradeVO(j);
        }
        if (soapObject.hasProperty("student"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("student");
            student =  new StudentVO (j);
            
        }
        if (soapObject.hasProperty("studentDcid"))
        {
            Object obj = soapObject.getProperty("studentDcid");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                studentDcid = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                studentDcid = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("studentDcidSpecified"))
        {
            Object obj = soapObject.getProperty("studentDcidSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                studentDcidSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                studentDcidSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("studentId"))
        {
            Object obj = soapObject.getProperty("studentId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                studentId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                studentId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("studentIdSpecified"))
        {
            Object obj = soapObject.getProperty("studentIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                studentIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                studentIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("teachers"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("teachers");
            teachers = new VectorTeacherVO(j);
        }
        if (soapObject.hasProperty("terms"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("terms");
            terms = new VectorTermVO(j);
        }
        if (soapObject.hasProperty("yearId"))
        {
            Object obj = soapObject.getProperty("yearId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                yearId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                yearId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("yearIdSpecified"))
        {
            Object obj = soapObject.getProperty("yearIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                yearIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                yearIdSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return activities;
            case 1:
                return assignmentCategories;
            case 2:
                return assignmentScores;
            case 3:
                return assignments;
            case 4:
                return attendance;
            case 5:
                return attendanceCodes;
            case 6:
                return bulletins;
            case 7:
                return citizenCodes;
            case 8:
                return citizenGrades;
            case 9:
                return courseRequests;
            case 10:
                return enrollments;
            case 11:
                return feeBalance;
            case 12:
                return feeTransactions;
            case 13:
                return feeTypes;
            case 14:
                return finalGrades;
            case 15:
                return gradeScales;
            case 16:
                return lunchTransactions;
            case 17:
                return notInSessionDays;
            case 18:
                return notificationSettingsVO;
            case 19:
                return periods;
            case 20:
                return reportingTerms;
            case 21:
                return schools;
            case 22:
                return sections;
            case 23:
                return standards;
            case 24:
                return standardsGrades;
            case 25:
                return student;
            case 26:
                return studentDcid;
            case 27:
                return studentDcidSpecified;
            case 28:
                return studentId;
            case 29:
                return studentIdSpecified;
            case 30:
                return teachers;
            case 31:
                return terms;
            case 32:
                return yearId;
            case 33:
                return yearIdSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 34;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "activities";
                break;
            case 1:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "assignmentCategories";
                break;
            case 2:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "assignmentScores";
                break;
            case 3:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "assignments";
                break;
            case 4:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "attendance";
                break;
            case 5:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "attendanceCodes";
                break;
            case 6:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "bulletins";
                break;
            case 7:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "citizenCodes";
                break;
            case 8:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "citizenGrades";
                break;
            case 9:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "courseRequests";
                break;
            case 10:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "enrollments";
                break;
            case 11:
                info.type = FeeBalanceVO.class;
                info.name = "feeBalance";
                break;
            case 12:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "feeTransactions";
                break;
            case 13:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "feeTypes";
                break;
            case 14:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "finalGrades";
                break;
            case 15:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "gradeScales";
                break;
            case 16:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "lunchTransactions";
                break;
            case 17:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "notInSessionDays";
                break;
            case 18:
                info.type = NotificationSettingsVO.class;
                info.name = "notificationSettingsVO";
                break;
            case 19:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "periods";
                break;
            case 20:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "reportingTerms";
                break;
            case 21:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "schools";
                break;
            case 22:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "sections";
                break;
            case 23:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "standards";
                break;
            case 24:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "standardsGrades";
                break;
            case 25:
                info.type = StudentVO.class;
                info.name = "student";
                break;
            case 26:
                info.type = Long.class;
                info.name = "studentDcid";
                break;
            case 27:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "studentDcidSpecified";
                break;
            case 28:
                info.type = Long.class;
                info.name = "studentId";
                break;
            case 29:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "studentIdSpecified";
                break;
            case 30:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "teachers";
                break;
            case 31:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "terms";
                break;
            case 32:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "yearId";
                break;
            case 33:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "yearIdSpecified";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}

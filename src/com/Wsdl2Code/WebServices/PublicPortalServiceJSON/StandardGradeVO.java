package com.Wsdl2Code.WebServices.PublicPortalServiceJSON;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 6/12/2014 1:13:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class StandardGradeVO implements KvmSerializable {
    
    public String comment;
    public String commentLastUpdated;
    public boolean commentLastUpdatedSpecified;
    public int exempt;
    public boolean exemptSpecified;
    public String gradeEntered;
    public String gradeLastUpdated;
    public boolean gradeLastUpdatedSpecified;
    public int gradeType;
    public boolean gradeTypeSpecified;
    public long id;
    public boolean idSpecified;
    public int late;
    public boolean lateSpecified;
    public int missing;
    public boolean missingSpecified;
    public long reportingTermId;
    public boolean reportingTermIdSpecified;
    public long sectionId;
    public boolean sectionIdSpecified;
    public long standardId;
    public boolean standardIdSpecified;
    
    public StandardGradeVO(){}
    
    public StandardGradeVO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("comment"))
        {
            Object obj = soapObject.getProperty("comment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                comment = j.toString();
            }else if (obj!= null && obj instanceof String){
                comment = (String) obj;
            }
        }
        if (soapObject.hasProperty("commentLastUpdated"))
        {
            Object obj = soapObject.getProperty("commentLastUpdated");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                commentLastUpdated = j.toString();
            }else if (obj!= null && obj instanceof String){
                commentLastUpdated = (String) obj;
            }
        }
        if (soapObject.hasProperty("commentLastUpdatedSpecified"))
        {
            Object obj = soapObject.getProperty("commentLastUpdatedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                commentLastUpdatedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                commentLastUpdatedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("exempt"))
        {
            Object obj = soapObject.getProperty("exempt");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                exempt = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                exempt = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("exemptSpecified"))
        {
            Object obj = soapObject.getProperty("exemptSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                exemptSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                exemptSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("gradeEntered"))
        {
            Object obj = soapObject.getProperty("gradeEntered");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gradeEntered = j.toString();
            }else if (obj!= null && obj instanceof String){
                gradeEntered = (String) obj;
            }
        }
        if (soapObject.hasProperty("gradeLastUpdated"))
        {
            Object obj = soapObject.getProperty("gradeLastUpdated");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gradeLastUpdated = j.toString();
            }else if (obj!= null && obj instanceof String){
                gradeLastUpdated = (String) obj;
            }
        }
        if (soapObject.hasProperty("gradeLastUpdatedSpecified"))
        {
            Object obj = soapObject.getProperty("gradeLastUpdatedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gradeLastUpdatedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                gradeLastUpdatedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("gradeType"))
        {
            Object obj = soapObject.getProperty("gradeType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gradeType = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                gradeType = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("gradeTypeSpecified"))
        {
            Object obj = soapObject.getProperty("gradeTypeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gradeTypeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                gradeTypeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("id"))
        {
            Object obj = soapObject.getProperty("id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                id = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("idSpecified"))
        {
            Object obj = soapObject.getProperty("idSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                idSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                idSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("late"))
        {
            Object obj = soapObject.getProperty("late");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                late = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                late = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("lateSpecified"))
        {
            Object obj = soapObject.getProperty("lateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                lateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("missing"))
        {
            Object obj = soapObject.getProperty("missing");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                missing = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                missing = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("missingSpecified"))
        {
            Object obj = soapObject.getProperty("missingSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                missingSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                missingSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("reportingTermId"))
        {
            Object obj = soapObject.getProperty("reportingTermId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                reportingTermId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                reportingTermId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("reportingTermIdSpecified"))
        {
            Object obj = soapObject.getProperty("reportingTermIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                reportingTermIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                reportingTermIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("sectionId"))
        {
            Object obj = soapObject.getProperty("sectionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sectionId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                sectionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("sectionIdSpecified"))
        {
            Object obj = soapObject.getProperty("sectionIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sectionIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                sectionIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("standardId"))
        {
            Object obj = soapObject.getProperty("standardId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                standardId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                standardId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("standardIdSpecified"))
        {
            Object obj = soapObject.getProperty("standardIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                standardIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                standardIdSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return comment;
            case 1:
                return commentLastUpdated;
            case 2:
                return commentLastUpdatedSpecified;
            case 3:
                return exempt;
            case 4:
                return exemptSpecified;
            case 5:
                return gradeEntered;
            case 6:
                return gradeLastUpdated;
            case 7:
                return gradeLastUpdatedSpecified;
            case 8:
                return gradeType;
            case 9:
                return gradeTypeSpecified;
            case 10:
                return id;
            case 11:
                return idSpecified;
            case 12:
                return late;
            case 13:
                return lateSpecified;
            case 14:
                return missing;
            case 15:
                return missingSpecified;
            case 16:
                return reportingTermId;
            case 17:
                return reportingTermIdSpecified;
            case 18:
                return sectionId;
            case 19:
                return sectionIdSpecified;
            case 20:
                return standardId;
            case 21:
                return standardIdSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 22;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "comment";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "commentLastUpdated";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "commentLastUpdatedSpecified";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "exempt";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "exemptSpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "gradeEntered";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "gradeLastUpdated";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "gradeLastUpdatedSpecified";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "gradeType";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "gradeTypeSpecified";
                break;
            case 10:
                info.type = Long.class;
                info.name = "id";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "idSpecified";
                break;
            case 12:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "late";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "lateSpecified";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "missing";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "missingSpecified";
                break;
            case 16:
                info.type = Long.class;
                info.name = "reportingTermId";
                break;
            case 17:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "reportingTermIdSpecified";
                break;
            case 18:
                info.type = Long.class;
                info.name = "sectionId";
                break;
            case 19:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "sectionIdSpecified";
                break;
            case 20:
                info.type = Long.class;
                info.name = "standardId";
                break;
            case 21:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "standardIdSpecified";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}

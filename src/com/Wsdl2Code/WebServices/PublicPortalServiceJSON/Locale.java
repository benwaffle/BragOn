package com.Wsdl2Code.WebServices.PublicPortalServiceJSON;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 6/12/2014 1:13:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.Set;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class Locale implements KvmSerializable {
    
    public String iSO3Country;
    public String iSO3Language;
    public String country;
    public String displayCountry;
    public String displayLanguage;
    public String displayName;
    public String displayScript;
    public String displayVariant;
    public Set extensionKeys;
    public String language;
    public String script;
    public Set unicodeLocaleAttributes;
    public Set unicodeLocaleKeys;
    public String variant;
    
    public Locale(){}
    
    public Locale(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("ISO3Country"))
        {
            Object obj = soapObject.getProperty("ISO3Country");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                iSO3Country = j.toString();
            }else if (obj!= null && obj instanceof String){
                iSO3Country = (String) obj;
            }
        }
        if (soapObject.hasProperty("ISO3Language"))
        {
            Object obj = soapObject.getProperty("ISO3Language");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                iSO3Language = j.toString();
            }else if (obj!= null && obj instanceof String){
                iSO3Language = (String) obj;
            }
        }
        if (soapObject.hasProperty("country"))
        {
            Object obj = soapObject.getProperty("country");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                country = j.toString();
            }else if (obj!= null && obj instanceof String){
                country = (String) obj;
            }
        }
        if (soapObject.hasProperty("displayCountry"))
        {
            Object obj = soapObject.getProperty("displayCountry");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayCountry = j.toString();
            }else if (obj!= null && obj instanceof String){
                displayCountry = (String) obj;
            }
        }
        if (soapObject.hasProperty("displayLanguage"))
        {
            Object obj = soapObject.getProperty("displayLanguage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayLanguage = j.toString();
            }else if (obj!= null && obj instanceof String){
                displayLanguage = (String) obj;
            }
        }
        if (soapObject.hasProperty("displayName"))
        {
            Object obj = soapObject.getProperty("displayName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayName = j.toString();
            }else if (obj!= null && obj instanceof String){
                displayName = (String) obj;
            }
        }
        if (soapObject.hasProperty("displayScript"))
        {
            Object obj = soapObject.getProperty("displayScript");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayScript = j.toString();
            }else if (obj!= null && obj instanceof String){
                displayScript = (String) obj;
            }
        }
        if (soapObject.hasProperty("displayVariant"))
        {
            Object obj = soapObject.getProperty("displayVariant");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayVariant = j.toString();
            }else if (obj!= null && obj instanceof String){
                displayVariant = (String) obj;
            }
        }
        if (soapObject.hasProperty("extensionKeys"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("extensionKeys");
            extensionKeys =  new Set (j);
            
        }
        if (soapObject.hasProperty("language"))
        {
            Object obj = soapObject.getProperty("language");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                language = j.toString();
            }else if (obj!= null && obj instanceof String){
                language = (String) obj;
            }
        }
        if (soapObject.hasProperty("script"))
        {
            Object obj = soapObject.getProperty("script");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                script = j.toString();
            }else if (obj!= null && obj instanceof String){
                script = (String) obj;
            }
        }
        if (soapObject.hasProperty("unicodeLocaleAttributes"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("unicodeLocaleAttributes");
            unicodeLocaleAttributes =  new Set (j);
            
        }
        if (soapObject.hasProperty("unicodeLocaleKeys"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("unicodeLocaleKeys");
            unicodeLocaleKeys =  new Set (j);
            
        }
        if (soapObject.hasProperty("variant"))
        {
            Object obj = soapObject.getProperty("variant");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                variant = j.toString();
            }else if (obj!= null && obj instanceof String){
                variant = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return iSO3Country;
            case 1:
                return iSO3Language;
            case 2:
                return country;
            case 3:
                return displayCountry;
            case 4:
                return displayLanguage;
            case 5:
                return displayName;
            case 6:
                return displayScript;
            case 7:
                return displayVariant;
            case 8:
                return extensionKeys;
            case 9:
                return language;
            case 10:
                return script;
            case 11:
                return unicodeLocaleAttributes;
            case 12:
                return unicodeLocaleKeys;
            case 13:
                return variant;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 14;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ISO3Country";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ISO3Language";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "country";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "displayCountry";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "displayLanguage";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "displayName";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "displayScript";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "displayVariant";
                break;
            case 8:
                info.type = Set.class;
                info.name = "extensionKeys";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "language";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "script";
                break;
            case 11:
                info.type = Set.class;
                info.name = "unicodeLocaleAttributes";
                break;
            case 12:
                info.type = Set.class;
                info.name = "unicodeLocaleKeys";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "variant";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}

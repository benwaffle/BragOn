package com.Wsdl2Code.WebServices.PublicPortalServiceJSON;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 6/12/2014 1:13:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorSectionEnrollmentVO;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorStartStopDateVO;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class SectionVO implements KvmSerializable {
    
    public String courseCode;
    public String description;
    public VectorSectionEnrollmentVO enrollments;
    public String expression;
    public long id;
    public boolean idSpecified;
    public String roomName;
    public String schoolCourseTitle;
    public long schoolNumber;
    public boolean schoolNumberSpecified;
    public String sectionNum;
    public VectorStartStopDateVO startStopDates;
    public long teacherID;
    public boolean teacherIDSpecified;
    public long termID;
    public boolean termIDSpecified;
    
    public SectionVO(){}
    
    public SectionVO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("courseCode"))
        {
            Object obj = soapObject.getProperty("courseCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                courseCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                courseCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("description"))
        {
            Object obj = soapObject.getProperty("description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                description = j.toString();
            }else if (obj!= null && obj instanceof String){
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("enrollments"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("enrollments");
            enrollments = new VectorSectionEnrollmentVO(j);
        }
        if (soapObject.hasProperty("expression"))
        {
            Object obj = soapObject.getProperty("expression");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                expression = j.toString();
            }else if (obj!= null && obj instanceof String){
                expression = (String) obj;
            }
        }
        if (soapObject.hasProperty("id"))
        {
            Object obj = soapObject.getProperty("id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                id = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("idSpecified"))
        {
            Object obj = soapObject.getProperty("idSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                idSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                idSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("roomName"))
        {
            Object obj = soapObject.getProperty("roomName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                roomName = j.toString();
            }else if (obj!= null && obj instanceof String){
                roomName = (String) obj;
            }
        }
        if (soapObject.hasProperty("schoolCourseTitle"))
        {
            Object obj = soapObject.getProperty("schoolCourseTitle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolCourseTitle = j.toString();
            }else if (obj!= null && obj instanceof String){
                schoolCourseTitle = (String) obj;
            }
        }
        if (soapObject.hasProperty("schoolNumber"))
        {
            Object obj = soapObject.getProperty("schoolNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                schoolNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("schoolNumberSpecified"))
        {
            Object obj = soapObject.getProperty("schoolNumberSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolNumberSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                schoolNumberSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("sectionNum"))
        {
            Object obj = soapObject.getProperty("sectionNum");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sectionNum = j.toString();
            }else if (obj!= null && obj instanceof String){
                sectionNum = (String) obj;
            }
        }
        if (soapObject.hasProperty("startStopDates"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("startStopDates");
            startStopDates = new VectorStartStopDateVO(j);
        }
        if (soapObject.hasProperty("teacherID"))
        {
            Object obj = soapObject.getProperty("teacherID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                teacherID = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                teacherID = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("teacherIDSpecified"))
        {
            Object obj = soapObject.getProperty("teacherIDSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                teacherIDSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                teacherIDSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("termID"))
        {
            Object obj = soapObject.getProperty("termID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                termID = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                termID = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("termIDSpecified"))
        {
            Object obj = soapObject.getProperty("termIDSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                termIDSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                termIDSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return courseCode;
            case 1:
                return description;
            case 2:
                return enrollments;
            case 3:
                return expression;
            case 4:
                return id;
            case 5:
                return idSpecified;
            case 6:
                return roomName;
            case 7:
                return schoolCourseTitle;
            case 8:
                return schoolNumber;
            case 9:
                return schoolNumberSpecified;
            case 10:
                return sectionNum;
            case 11:
                return startStopDates;
            case 12:
                return teacherID;
            case 13:
                return teacherIDSpecified;
            case 14:
                return termID;
            case 15:
                return termIDSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 16;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "courseCode";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "description";
                break;
            case 2:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "enrollments";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "expression";
                break;
            case 4:
                info.type = Long.class;
                info.name = "id";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "idSpecified";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "roomName";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "schoolCourseTitle";
                break;
            case 8:
                info.type = Long.class;
                info.name = "schoolNumber";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "schoolNumberSpecified";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "sectionNum";
                break;
            case 11:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "startStopDates";
                break;
            case 12:
                info.type = Long.class;
                info.name = "teacherID";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "teacherIDSpecified";
                break;
            case 14:
                info.type = Long.class;
                info.name = "termID";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "termIDSpecified";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}

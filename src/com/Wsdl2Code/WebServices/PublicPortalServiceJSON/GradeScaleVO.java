package com.Wsdl2Code.WebServices.PublicPortalServiceJSON;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 6/12/2014 1:13:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorGradeScaleItemVO;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class GradeScaleVO implements KvmSerializable {
    
    public String description;
    public VectorGradeScaleItemVO gradeScaleItems;
    public long id;
    public boolean idSpecified;
    public String name;
    public int numeric;
    public boolean numericSpecified;
    public int numericMax;
    public boolean numericMaxSpecified;
    public int numericMin;
    public boolean numericMinSpecified;
    public int numericPrecision;
    public boolean numericPrecisionSpecified;
    public int numericScale;
    public boolean numericScaleSpecified;
    
    public GradeScaleVO(){}
    
    public GradeScaleVO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("description"))
        {
            Object obj = soapObject.getProperty("description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                description = j.toString();
            }else if (obj!= null && obj instanceof String){
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("gradeScaleItems"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("gradeScaleItems");
            gradeScaleItems = new VectorGradeScaleItemVO(j);
        }
        if (soapObject.hasProperty("id"))
        {
            Object obj = soapObject.getProperty("id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                id = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("idSpecified"))
        {
            Object obj = soapObject.getProperty("idSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                idSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                idSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("name"))
        {
            Object obj = soapObject.getProperty("name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) obj;
            }
        }
        if (soapObject.hasProperty("numeric"))
        {
            Object obj = soapObject.getProperty("numeric");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numeric = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                numeric = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("numericSpecified"))
        {
            Object obj = soapObject.getProperty("numericSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numericSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                numericSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("numericMax"))
        {
            Object obj = soapObject.getProperty("numericMax");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numericMax = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                numericMax = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("numericMaxSpecified"))
        {
            Object obj = soapObject.getProperty("numericMaxSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numericMaxSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                numericMaxSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("numericMin"))
        {
            Object obj = soapObject.getProperty("numericMin");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numericMin = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                numericMin = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("numericMinSpecified"))
        {
            Object obj = soapObject.getProperty("numericMinSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numericMinSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                numericMinSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("numericPrecision"))
        {
            Object obj = soapObject.getProperty("numericPrecision");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numericPrecision = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                numericPrecision = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("numericPrecisionSpecified"))
        {
            Object obj = soapObject.getProperty("numericPrecisionSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numericPrecisionSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                numericPrecisionSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("numericScale"))
        {
            Object obj = soapObject.getProperty("numericScale");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numericScale = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                numericScale = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("numericScaleSpecified"))
        {
            Object obj = soapObject.getProperty("numericScaleSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numericScaleSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                numericScaleSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return description;
            case 1:
                return gradeScaleItems;
            case 2:
                return id;
            case 3:
                return idSpecified;
            case 4:
                return name;
            case 5:
                return numeric;
            case 6:
                return numericSpecified;
            case 7:
                return numericMax;
            case 8:
                return numericMaxSpecified;
            case 9:
                return numericMin;
            case 10:
                return numericMinSpecified;
            case 11:
                return numericPrecision;
            case 12:
                return numericPrecisionSpecified;
            case 13:
                return numericScale;
            case 14:
                return numericScaleSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 15;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "description";
                break;
            case 1:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "gradeScaleItems";
                break;
            case 2:
                info.type = Long.class;
                info.name = "id";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "idSpecified";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "name";
                break;
            case 5:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "numeric";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "numericSpecified";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "numericMax";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "numericMaxSpecified";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "numericMin";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "numericMinSpecified";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "numericPrecision";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "numericPrecisionSpecified";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "numericScale";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "numericScaleSpecified";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}

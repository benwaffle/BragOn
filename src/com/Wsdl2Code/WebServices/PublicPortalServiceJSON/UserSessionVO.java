package com.Wsdl2Code.WebServices.PublicPortalServiceJSON;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 6/9/2014 3:15:59 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.Locale;
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.ServerInfo;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class UserSessionVO implements KvmSerializable {
    
    public Locale locale;
    public String serverCurrentTime;
    public boolean serverCurrentTimeSpecified;
    public ServerInfo serverInfo;
    public String serviceTicket;
    public long userId;
    public boolean userIdSpecified;
    public int userType;
    public boolean userTypeSpecified;
    
    public UserSessionVO(){}
    
    public UserSessionVO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("locale"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("locale");
            locale =  new Locale (j);
            
        }
        if (soapObject.hasProperty("serverCurrentTime"))
        {
            Object obj = soapObject.getProperty("serverCurrentTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                serverCurrentTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                serverCurrentTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("serverCurrentTimeSpecified"))
        {
            Object obj = soapObject.getProperty("serverCurrentTimeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                serverCurrentTimeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                serverCurrentTimeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("serverInfo"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("serverInfo");
            serverInfo =  new ServerInfo (j);
            
        }
        if (soapObject.hasProperty("serviceTicket"))
        {
            Object obj = soapObject.getProperty("serviceTicket");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                serviceTicket = j.toString();
            }else if (obj!= null && obj instanceof String){
                serviceTicket = (String) obj;
            }
        }
        if (soapObject.hasProperty("userId"))
        {
            Object obj = soapObject.getProperty("userId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                userId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                userId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("userIdSpecified"))
        {
            Object obj = soapObject.getProperty("userIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                userIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                userIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("userType"))
        {
            Object obj = soapObject.getProperty("userType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                userType = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                userType = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("userTypeSpecified"))
        {
            Object obj = soapObject.getProperty("userTypeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                userTypeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                userTypeSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return locale;
            case 1:
                return serverCurrentTime;
            case 2:
                return serverCurrentTimeSpecified;
            case 3:
                return serverInfo;
            case 4:
                return serviceTicket;
            case 5:
                return userId;
            case 6:
                return userIdSpecified;
            case 7:
                return userType;
            case 8:
                return userTypeSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 9;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = Locale.class;
                info.name = "locale";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "serverCurrentTime";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "serverCurrentTimeSpecified";
                break;
            case 3:
                info.type = ServerInfo.class;
                info.name = "serverInfo";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "serviceTicket";
                break;
            case 5:
                info.type = Long.class;
                info.name = "userId";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "userIdSpecified";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "userType";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "userTypeSpecified";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}

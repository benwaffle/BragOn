package com.Wsdl2Code.WebServices.PublicPortalServiceJSON;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 6/9/2014 3:15:59 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class FeeBalanceVO implements KvmSerializable {
    
    public double balance;
    public boolean balanceSpecified;
    public double credit;
    public boolean creditSpecified;
    public double debit;
    public boolean debitSpecified;
    public long id;
    public boolean idSpecified;
    public long schoolid;
    public boolean schoolidSpecified;
    public int yearid;
    public boolean yearidSpecified;
    
    public FeeBalanceVO(){}
    
    public FeeBalanceVO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("balance"))
        {
            Object obj = soapObject.getProperty("balance");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                balance = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                balance = (Double) obj;
            }
        }
        if (soapObject.hasProperty("balanceSpecified"))
        {
            Object obj = soapObject.getProperty("balanceSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                balanceSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                balanceSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("credit"))
        {
            Object obj = soapObject.getProperty("credit");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                credit = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                credit = (Double) obj;
            }
        }
        if (soapObject.hasProperty("creditSpecified"))
        {
            Object obj = soapObject.getProperty("creditSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                creditSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                creditSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("debit"))
        {
            Object obj = soapObject.getProperty("debit");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                debit = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                debit = (Double) obj;
            }
        }
        if (soapObject.hasProperty("debitSpecified"))
        {
            Object obj = soapObject.getProperty("debitSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                debitSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                debitSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("id"))
        {
            Object obj = soapObject.getProperty("id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                id = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("idSpecified"))
        {
            Object obj = soapObject.getProperty("idSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                idSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                idSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("schoolid"))
        {
            Object obj = soapObject.getProperty("schoolid");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolid = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                schoolid = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("schoolidSpecified"))
        {
            Object obj = soapObject.getProperty("schoolidSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolidSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                schoolidSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("yearid"))
        {
            Object obj = soapObject.getProperty("yearid");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                yearid = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                yearid = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("yearidSpecified"))
        {
            Object obj = soapObject.getProperty("yearidSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                yearidSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                yearidSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return balance;
            case 1:
                return balanceSpecified;
            case 2:
                return credit;
            case 3:
                return creditSpecified;
            case 4:
                return debit;
            case 5:
                return debitSpecified;
            case 6:
                return id;
            case 7:
                return idSpecified;
            case 8:
                return schoolid;
            case 9:
                return schoolidSpecified;
            case 10:
                return yearid;
            case 11:
                return yearidSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 12;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = Double.class;
                info.name = "balance";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "balanceSpecified";
                break;
            case 2:
                info.type = Double.class;
                info.name = "credit";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "creditSpecified";
                break;
            case 4:
                info.type = Double.class;
                info.name = "debit";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "debitSpecified";
                break;
            case 6:
                info.type = Long.class;
                info.name = "id";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "idSpecified";
                break;
            case 8:
                info.type = Long.class;
                info.name = "schoolid";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "schoolidSpecified";
                break;
            case 10:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "yearid";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "yearidSpecified";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}

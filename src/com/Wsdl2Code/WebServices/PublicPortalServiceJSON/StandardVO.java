package com.Wsdl2Code.WebServices.PublicPortalServiceJSON;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 6/12/2014 1:13:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class StandardVO implements KvmSerializable {
    
    public String description;
    public long gradeScaleID;
    public boolean gradeScaleIDSpecified;
    public long id;
    public boolean idSpecified;
    public String identifier;
    public String name;
    public long parentStandardID;
    public boolean parentStandardIDSpecified;
    public int sortOrder;
    public boolean sortOrderSpecified;
    
    public StandardVO(){}
    
    public StandardVO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("description"))
        {
            Object obj = soapObject.getProperty("description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                description = j.toString();
            }else if (obj!= null && obj instanceof String){
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("gradeScaleID"))
        {
            Object obj = soapObject.getProperty("gradeScaleID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gradeScaleID = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                gradeScaleID = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("gradeScaleIDSpecified"))
        {
            Object obj = soapObject.getProperty("gradeScaleIDSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gradeScaleIDSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                gradeScaleIDSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("id"))
        {
            Object obj = soapObject.getProperty("id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                id = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("idSpecified"))
        {
            Object obj = soapObject.getProperty("idSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                idSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                idSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("identifier"))
        {
            Object obj = soapObject.getProperty("identifier");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                identifier = j.toString();
            }else if (obj!= null && obj instanceof String){
                identifier = (String) obj;
            }
        }
        if (soapObject.hasProperty("name"))
        {
            Object obj = soapObject.getProperty("name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) obj;
            }
        }
        if (soapObject.hasProperty("parentStandardID"))
        {
            Object obj = soapObject.getProperty("parentStandardID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parentStandardID = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                parentStandardID = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("parentStandardIDSpecified"))
        {
            Object obj = soapObject.getProperty("parentStandardIDSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parentStandardIDSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                parentStandardIDSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("sortOrder"))
        {
            Object obj = soapObject.getProperty("sortOrder");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sortOrder = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                sortOrder = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("sortOrderSpecified"))
        {
            Object obj = soapObject.getProperty("sortOrderSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sortOrderSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                sortOrderSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return description;
            case 1:
                return gradeScaleID;
            case 2:
                return gradeScaleIDSpecified;
            case 3:
                return id;
            case 4:
                return idSpecified;
            case 5:
                return identifier;
            case 6:
                return name;
            case 7:
                return parentStandardID;
            case 8:
                return parentStandardIDSpecified;
            case 9:
                return sortOrder;
            case 10:
                return sortOrderSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 11;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "description";
                break;
            case 1:
                info.type = Long.class;
                info.name = "gradeScaleID";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "gradeScaleIDSpecified";
                break;
            case 3:
                info.type = Long.class;
                info.name = "id";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "idSpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "identifier";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "name";
                break;
            case 7:
                info.type = Long.class;
                info.name = "parentStandardID";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "parentStandardIDSpecified";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "sortOrder";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "sortOrderSpecified";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}

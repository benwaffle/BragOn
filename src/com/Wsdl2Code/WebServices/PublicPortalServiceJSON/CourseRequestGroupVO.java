package com.Wsdl2Code.WebServices.PublicPortalServiceJSON;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 6/9/2014 3:15:59 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.VectorCourseRequestVO;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class CourseRequestGroupVO implements KvmSerializable {
    
    public VectorCourseRequestVO courses;
    public String description;
    public String emptyAdvice;
    public int gradeLevel;
    public boolean gradeLevelSpecified;
    public long id;
    public boolean idSpecified;
    public String itemType;
    public float maxCourseCount;
    public boolean maxCourseCountSpecified;
    public float minCourseCount;
    public boolean minCourseCountSpecified;
    public String name;
    public String requestType;
    public VectorCourseRequestVO requests;
    public long schoolId;
    public boolean schoolIdSpecified;
    public int sortOrder;
    public boolean sortOrderSpecified;
    public int yearId;
    public boolean yearIdSpecified;
    
    public CourseRequestGroupVO(){}
    
    public CourseRequestGroupVO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("courses"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("courses");
            courses = new VectorCourseRequestVO(j);
        }
        if (soapObject.hasProperty("description"))
        {
            Object obj = soapObject.getProperty("description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                description = j.toString();
            }else if (obj!= null && obj instanceof String){
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("emptyAdvice"))
        {
            Object obj = soapObject.getProperty("emptyAdvice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                emptyAdvice = j.toString();
            }else if (obj!= null && obj instanceof String){
                emptyAdvice = (String) obj;
            }
        }
        if (soapObject.hasProperty("gradeLevel"))
        {
            Object obj = soapObject.getProperty("gradeLevel");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gradeLevel = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                gradeLevel = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("gradeLevelSpecified"))
        {
            Object obj = soapObject.getProperty("gradeLevelSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gradeLevelSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                gradeLevelSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("id"))
        {
            Object obj = soapObject.getProperty("id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                id = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("idSpecified"))
        {
            Object obj = soapObject.getProperty("idSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                idSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                idSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("itemType"))
        {
            Object obj = soapObject.getProperty("itemType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                itemType = j.toString();
            }else if (obj!= null && obj instanceof String){
                itemType = (String) obj;
            }
        }
        if (soapObject.hasProperty("maxCourseCount"))
        {
            Object obj = soapObject.getProperty("maxCourseCount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                maxCourseCount = Float.parseFloat(j.toString());
            }else if (obj!= null && obj instanceof Number){
                maxCourseCount = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("maxCourseCountSpecified"))
        {
            Object obj = soapObject.getProperty("maxCourseCountSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                maxCourseCountSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                maxCourseCountSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("minCourseCount"))
        {
            Object obj = soapObject.getProperty("minCourseCount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                minCourseCount = Float.parseFloat(j.toString());
            }else if (obj!= null && obj instanceof Number){
                minCourseCount = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("minCourseCountSpecified"))
        {
            Object obj = soapObject.getProperty("minCourseCountSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                minCourseCountSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                minCourseCountSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("name"))
        {
            Object obj = soapObject.getProperty("name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) obj;
            }
        }
        if (soapObject.hasProperty("requestType"))
        {
            Object obj = soapObject.getProperty("requestType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                requestType = j.toString();
            }else if (obj!= null && obj instanceof String){
                requestType = (String) obj;
            }
        }
        if (soapObject.hasProperty("requests"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("requests");
            requests = new VectorCourseRequestVO(j);
        }
        if (soapObject.hasProperty("schoolId"))
        {
            Object obj = soapObject.getProperty("schoolId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                schoolId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("schoolIdSpecified"))
        {
            Object obj = soapObject.getProperty("schoolIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                schoolIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("sortOrder"))
        {
            Object obj = soapObject.getProperty("sortOrder");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sortOrder = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                sortOrder = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("sortOrderSpecified"))
        {
            Object obj = soapObject.getProperty("sortOrderSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sortOrderSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                sortOrderSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("yearId"))
        {
            Object obj = soapObject.getProperty("yearId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                yearId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                yearId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("yearIdSpecified"))
        {
            Object obj = soapObject.getProperty("yearIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                yearIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                yearIdSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return courses;
            case 1:
                return description;
            case 2:
                return emptyAdvice;
            case 3:
                return gradeLevel;
            case 4:
                return gradeLevelSpecified;
            case 5:
                return id;
            case 6:
                return idSpecified;
            case 7:
                return itemType;
            case 8:
                return maxCourseCount;
            case 9:
                return maxCourseCountSpecified;
            case 10:
                return minCourseCount;
            case 11:
                return minCourseCountSpecified;
            case 12:
                return name;
            case 13:
                return requestType;
            case 14:
                return requests;
            case 15:
                return schoolId;
            case 16:
                return schoolIdSpecified;
            case 17:
                return sortOrder;
            case 18:
                return sortOrderSpecified;
            case 19:
                return yearId;
            case 20:
                return yearIdSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 21;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "courses";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "description";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "emptyAdvice";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "gradeLevel";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "gradeLevelSpecified";
                break;
            case 5:
                info.type = Long.class;
                info.name = "id";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "idSpecified";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "itemType";
                break;
            case 8:
                info.type = Float.class;
                info.name = "maxCourseCount";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "maxCourseCountSpecified";
                break;
            case 10:
                info.type = Float.class;
                info.name = "minCourseCount";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "minCourseCountSpecified";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "name";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "requestType";
                break;
            case 14:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "requests";
                break;
            case 15:
                info.type = Long.class;
                info.name = "schoolId";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "schoolIdSpecified";
                break;
            case 17:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "sortOrder";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "sortOrderSpecified";
                break;
            case 19:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "yearId";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "yearIdSpecified";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}

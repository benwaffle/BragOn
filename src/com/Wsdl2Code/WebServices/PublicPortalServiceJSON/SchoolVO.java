package com.Wsdl2Code.WebServices.PublicPortalServiceJSON;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 6/12/2014 1:13:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.DisabledFeaturesVO;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class SchoolVO implements KvmSerializable {
    
    public String abbreviation;
    public String address;
    public DisabledFeaturesVO disabledFeatures;
    public int highGrade;
    public boolean highGradeSpecified;
    public int lowGrade;
    public boolean lowGradeSpecified;
    public String mapMimeType;
    public String name;
    public long schoolId;
    public boolean schoolIdSpecified;
    public String schoolMapModifiedDate;
    public boolean schoolMapModifiedDateSpecified;
    public long schoolNumber;
    public boolean schoolNumberSpecified;
    public String schooladdress;
    public String schoolcity;
    public String schoolcountry;
    public String schoolfax;
    public String schoolphone;
    public String schoolstate;
    public String schoolzip;
    
    public SchoolVO(){}
    
    public SchoolVO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("abbreviation"))
        {
            Object obj = soapObject.getProperty("abbreviation");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                abbreviation = j.toString();
            }else if (obj!= null && obj instanceof String){
                abbreviation = (String) obj;
            }
        }
        if (soapObject.hasProperty("address"))
        {
            Object obj = soapObject.getProperty("address");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                address = j.toString();
            }else if (obj!= null && obj instanceof String){
                address = (String) obj;
            }
        }
        if (soapObject.hasProperty("disabledFeatures"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("disabledFeatures");
            disabledFeatures =  new DisabledFeaturesVO (j);
            
        }
        if (soapObject.hasProperty("highGrade"))
        {
            Object obj = soapObject.getProperty("highGrade");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                highGrade = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                highGrade = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("highGradeSpecified"))
        {
            Object obj = soapObject.getProperty("highGradeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                highGradeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                highGradeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("lowGrade"))
        {
            Object obj = soapObject.getProperty("lowGrade");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lowGrade = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                lowGrade = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("lowGradeSpecified"))
        {
            Object obj = soapObject.getProperty("lowGradeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lowGradeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                lowGradeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("mapMimeType"))
        {
            Object obj = soapObject.getProperty("mapMimeType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                mapMimeType = j.toString();
            }else if (obj!= null && obj instanceof String){
                mapMimeType = (String) obj;
            }
        }
        if (soapObject.hasProperty("name"))
        {
            Object obj = soapObject.getProperty("name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) obj;
            }
        }
        if (soapObject.hasProperty("schoolId"))
        {
            Object obj = soapObject.getProperty("schoolId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                schoolId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("schoolIdSpecified"))
        {
            Object obj = soapObject.getProperty("schoolIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                schoolIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("schoolMapModifiedDate"))
        {
            Object obj = soapObject.getProperty("schoolMapModifiedDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolMapModifiedDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                schoolMapModifiedDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("schoolMapModifiedDateSpecified"))
        {
            Object obj = soapObject.getProperty("schoolMapModifiedDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolMapModifiedDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                schoolMapModifiedDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("schoolNumber"))
        {
            Object obj = soapObject.getProperty("schoolNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                schoolNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("schoolNumberSpecified"))
        {
            Object obj = soapObject.getProperty("schoolNumberSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolNumberSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                schoolNumberSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("schooladdress"))
        {
            Object obj = soapObject.getProperty("schooladdress");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schooladdress = j.toString();
            }else if (obj!= null && obj instanceof String){
                schooladdress = (String) obj;
            }
        }
        if (soapObject.hasProperty("schoolcity"))
        {
            Object obj = soapObject.getProperty("schoolcity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolcity = j.toString();
            }else if (obj!= null && obj instanceof String){
                schoolcity = (String) obj;
            }
        }
        if (soapObject.hasProperty("schoolcountry"))
        {
            Object obj = soapObject.getProperty("schoolcountry");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolcountry = j.toString();
            }else if (obj!= null && obj instanceof String){
                schoolcountry = (String) obj;
            }
        }
        if (soapObject.hasProperty("schoolfax"))
        {
            Object obj = soapObject.getProperty("schoolfax");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolfax = j.toString();
            }else if (obj!= null && obj instanceof String){
                schoolfax = (String) obj;
            }
        }
        if (soapObject.hasProperty("schoolphone"))
        {
            Object obj = soapObject.getProperty("schoolphone");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolphone = j.toString();
            }else if (obj!= null && obj instanceof String){
                schoolphone = (String) obj;
            }
        }
        if (soapObject.hasProperty("schoolstate"))
        {
            Object obj = soapObject.getProperty("schoolstate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolstate = j.toString();
            }else if (obj!= null && obj instanceof String){
                schoolstate = (String) obj;
            }
        }
        if (soapObject.hasProperty("schoolzip"))
        {
            Object obj = soapObject.getProperty("schoolzip");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolzip = j.toString();
            }else if (obj!= null && obj instanceof String){
                schoolzip = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return abbreviation;
            case 1:
                return address;
            case 2:
                return disabledFeatures;
            case 3:
                return highGrade;
            case 4:
                return highGradeSpecified;
            case 5:
                return lowGrade;
            case 6:
                return lowGradeSpecified;
            case 7:
                return mapMimeType;
            case 8:
                return name;
            case 9:
                return schoolId;
            case 10:
                return schoolIdSpecified;
            case 11:
                return schoolMapModifiedDate;
            case 12:
                return schoolMapModifiedDateSpecified;
            case 13:
                return schoolNumber;
            case 14:
                return schoolNumberSpecified;
            case 15:
                return schooladdress;
            case 16:
                return schoolcity;
            case 17:
                return schoolcountry;
            case 18:
                return schoolfax;
            case 19:
                return schoolphone;
            case 20:
                return schoolstate;
            case 21:
                return schoolzip;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 22;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "abbreviation";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "address";
                break;
            case 2:
                info.type = DisabledFeaturesVO.class;
                info.name = "disabledFeatures";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "highGrade";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "highGradeSpecified";
                break;
            case 5:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "lowGrade";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "lowGradeSpecified";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "mapMimeType";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "name";
                break;
            case 9:
                info.type = Long.class;
                info.name = "schoolId";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "schoolIdSpecified";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "schoolMapModifiedDate";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "schoolMapModifiedDateSpecified";
                break;
            case 13:
                info.type = Long.class;
                info.name = "schoolNumber";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "schoolNumberSpecified";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "schooladdress";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "schoolcity";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "schoolcountry";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "schoolfax";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "schoolphone";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "schoolstate";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "schoolzip";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}

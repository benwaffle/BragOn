package com.Wsdl2Code.WebServices.PublicPortalServiceJSON;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 6/9/2014 3:15:59 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.PublicPortalServiceJSON.WS_Enums.*;

import java.util.List;

import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;

import java.util.Hashtable;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import android.os.AsyncTask;

import org.ksoap2.serialization.MarshalFloat;

public class PublicPortalServiceJSON {
    
    public String NAMESPACE ="http://publicportal.rest.powerschool.pearson.com";
    public String url="";
    public int timeOut = 60000;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    
    public PublicPortalServiceJSON(){}
    
    public PublicPortalServiceJSON(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public PublicPortalServiceJSON(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public PublicPortalServiceJSON(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void logoutAsync(UserSessionVO userSessionVO) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        logoutAsync(userSessionVO, null);
    }
    
    public void logoutAsync(final UserSessionVO userSessionVO,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResultsVO>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResultsVO doInBackground(Void... params) {
                return logout(userSessionVO, headers);
            }
            @Override
            protected void onPostExecute(ResultsVO result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("logout", result);
                }
            }
        }.execute();
    }
    
    public ResultsVO logout(UserSessionVO userSessionVO){
        return logout(userSessionVO, null);
    }
    
    public ResultsVO logout(UserSessionVO userSessionVO,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://publicportal.rest.powerschool.pearson.com","logout");
        soapEnvelope.addMapping("http://publicportal.rest.powerschool.pearson.com","userSessionVO",new UserSessionVO().getClass());
        soapReq.addProperty("userSessionVO",userSessionVO);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:logout", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:logout", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResultsVO resultVariable =  new ResultsVO (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getStudentPhotoAsync(UserSessionVO userSessionVO,long studentID,boolean studentIDSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getStudentPhotoAsync(userSessionVO, studentID, studentIDSpecified, null);
    }
    
    public void getStudentPhotoAsync(final UserSessionVO userSessionVO,final long studentID,final boolean studentIDSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorByte>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorByte doInBackground(Void... params) {
                return getStudentPhoto(userSessionVO, studentID, studentIDSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorByte result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getStudentPhoto", result);
                }
            }
        }.execute();
    }
    
    public VectorByte getStudentPhoto(UserSessionVO userSessionVO,long studentID,boolean studentIDSpecified){
        return getStudentPhoto(userSessionVO, studentID, studentIDSpecified, null);
    }
    
    public VectorByte getStudentPhoto(UserSessionVO userSessionVO,long studentID,boolean studentIDSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://publicportal.rest.powerschool.pearson.com","getStudentPhoto");
        soapEnvelope.addMapping("http://publicportal.rest.powerschool.pearson.com","userSessionVO",new UserSessionVO().getClass());
        soapReq.addProperty("userSessionVO",userSessionVO);
        soapReq.addProperty("studentID",studentID);
        soapReq.addProperty("studentIDSpecified",studentIDSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getStudentPhoto", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getStudentPhoto", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapPrimitive j = (SoapPrimitive)obj;
                    VectorByte resultVariable = new VectorByte(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void storeNotificationSettingsAsync(UserSessionVO userSessionVO,NotificationSettingsVO ns) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        storeNotificationSettingsAsync(userSessionVO, ns, null);
    }
    
    public void storeNotificationSettingsAsync(final UserSessionVO userSessionVO,final NotificationSettingsVO ns,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResultsVO>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResultsVO doInBackground(Void... params) {
                return storeNotificationSettings(userSessionVO, ns, headers);
            }
            @Override
            protected void onPostExecute(ResultsVO result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("storeNotificationSettings", result);
                }
            }
        }.execute();
    }
    
    public ResultsVO storeNotificationSettings(UserSessionVO userSessionVO,NotificationSettingsVO ns){
        return storeNotificationSettings(userSessionVO, ns, null);
    }
    
    public ResultsVO storeNotificationSettings(UserSessionVO userSessionVO,NotificationSettingsVO ns,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://publicportal.rest.powerschool.pearson.com","storeNotificationSettings");
        soapEnvelope.addMapping("http://publicportal.rest.powerschool.pearson.com","userSessionVO",new UserSessionVO().getClass());
        soapEnvelope.addMapping("http://publicportal.rest.powerschool.pearson.com","ns",new NotificationSettingsVO().getClass());
        soapReq.addProperty("userSessionVO",userSessionVO);
        soapReq.addProperty("ns",ns);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:storeNotificationSettings", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:storeNotificationSettings", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResultsVO resultVariable =  new ResultsVO (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getAllCourseRequestsAsync(UserSessionVO userSessionVO,long studentId,boolean studentIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getAllCourseRequestsAsync(userSessionVO, studentId, studentIdSpecified, null);
    }
    
    public void getAllCourseRequestsAsync(final UserSessionVO userSessionVO,final long studentId,final boolean studentIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResultsVO>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResultsVO doInBackground(Void... params) {
                return getAllCourseRequests(userSessionVO, studentId, studentIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(ResultsVO result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getAllCourseRequests", result);
                }
            }
        }.execute();
    }
    
    public ResultsVO getAllCourseRequests(UserSessionVO userSessionVO,long studentId,boolean studentIdSpecified){
        return getAllCourseRequests(userSessionVO, studentId, studentIdSpecified, null);
    }
    
    public ResultsVO getAllCourseRequests(UserSessionVO userSessionVO,long studentId,boolean studentIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://publicportal.rest.powerschool.pearson.com","getAllCourseRequests");
        soapEnvelope.addMapping("http://publicportal.rest.powerschool.pearson.com","userSessionVO",new UserSessionVO().getClass());
        soapReq.addProperty("userSessionVO",userSessionVO);
        soapReq.addProperty("studentId",studentId);
        soapReq.addProperty("studentIdSpecified",studentIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getAllCourseRequests", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getAllCourseRequests", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResultsVO resultVariable =  new ResultsVO (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void loginAsync(String username,String password,int userType,boolean userTypeSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        loginAsync(username, password, userType, userTypeSpecified, null);
    }
    
    public void loginAsync(final String username,final String password,final int userType,final boolean userTypeSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResultsVO>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResultsVO doInBackground(Void... params) {
                return login(username, password, userType, userTypeSpecified, headers);
            }
            @Override
            protected void onPostExecute(ResultsVO result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("login", result);
                }
            }
        }.execute();
    }
    
    public ResultsVO login(String username,String password,int userType,boolean userTypeSpecified){
        return login(username, password, userType, userTypeSpecified, null);
    }
    
    public ResultsVO login(String username,String password,int userType,boolean userTypeSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://publicportal.rest.powerschool.pearson.com","login");
        soapReq.addProperty("username",username);
        soapReq.addProperty("password",password);
        soapReq.addProperty("userType",userType);
        soapReq.addProperty("userTypeSpecified",userTypeSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:login", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:login", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResultsVO resultVariable =  new ResultsVO (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getStudentDataAsync(UserSessionVO userSessionVO,VectorInt64 studentIDs) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getStudentDataAsync(userSessionVO, studentIDs, null);
    }
    
    public void getStudentDataAsync(final UserSessionVO userSessionVO,final VectorInt64 studentIDs,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResultsVO>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResultsVO doInBackground(Void... params) {
                return getStudentData(userSessionVO, studentIDs, headers);
            }
            @Override
            protected void onPostExecute(ResultsVO result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getStudentData", result);
                }
            }
        }.execute();
    }
    
    public ResultsVO getStudentData(UserSessionVO userSessionVO,VectorInt64 studentIDs){
        return getStudentData(userSessionVO, studentIDs, null);
    }
    
    public ResultsVO getStudentData(UserSessionVO userSessionVO,VectorInt64 studentIDs,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://publicportal.rest.powerschool.pearson.com","getStudentData");
        soapEnvelope.addMapping("http://publicportal.rest.powerschool.pearson.com","userSessionVO",new UserSessionVO().getClass());
        soapReq.addProperty("userSessionVO",userSessionVO);
        soapReq.addProperty("studentIDs",studentIDs);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getStudentData", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getStudentData", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResultsVO resultVariable =  new ResultsVO (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void storeCourseRequestsAsync(UserSessionVO userSessionVO,long studentId,boolean studentIdSpecified,VectorCourseRequestGroupVO courseRequestGroups) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        storeCourseRequestsAsync(userSessionVO, studentId, studentIdSpecified, courseRequestGroups, null);
    }
    
    public void storeCourseRequestsAsync(final UserSessionVO userSessionVO,final long studentId,final boolean studentIdSpecified,final VectorCourseRequestGroupVO courseRequestGroups,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResultsVO>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResultsVO doInBackground(Void... params) {
                return storeCourseRequests(userSessionVO, studentId, studentIdSpecified, courseRequestGroups, headers);
            }
            @Override
            protected void onPostExecute(ResultsVO result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("storeCourseRequests", result);
                }
            }
        }.execute();
    }
    
    public ResultsVO storeCourseRequests(UserSessionVO userSessionVO,long studentId,boolean studentIdSpecified,VectorCourseRequestGroupVO courseRequestGroups){
        return storeCourseRequests(userSessionVO, studentId, studentIdSpecified, courseRequestGroups, null);
    }
    
    public ResultsVO storeCourseRequests(UserSessionVO userSessionVO,long studentId,boolean studentIdSpecified,VectorCourseRequestGroupVO courseRequestGroups,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://publicportal.rest.powerschool.pearson.com","storeCourseRequests");
        soapEnvelope.addMapping("http://publicportal.rest.powerschool.pearson.com","userSessionVO",new UserSessionVO().getClass());
        soapReq.addProperty("userSessionVO",userSessionVO);
        soapReq.addProperty("studentId",studentId);
        soapReq.addProperty("studentIdSpecified",studentIdSpecified);
        soapReq.addProperty("courseRequestGroups",courseRequestGroups);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:storeCourseRequests", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:storeCourseRequests", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResultsVO resultVariable =  new ResultsVO (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getSchoolMapBySchoolNumberAsync(UserSessionVO userSessionVO,long schoolNumber,boolean schoolNumberSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getSchoolMapBySchoolNumberAsync(userSessionVO, schoolNumber, schoolNumberSpecified, null);
    }
    
    public void getSchoolMapBySchoolNumberAsync(final UserSessionVO userSessionVO,final long schoolNumber,final boolean schoolNumberSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorByte>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorByte doInBackground(Void... params) {
                return getSchoolMapBySchoolNumber(userSessionVO, schoolNumber, schoolNumberSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorByte result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getSchoolMapBySchoolNumber", result);
                }
            }
        }.execute();
    }
    
    public VectorByte getSchoolMapBySchoolNumber(UserSessionVO userSessionVO,long schoolNumber,boolean schoolNumberSpecified){
        return getSchoolMapBySchoolNumber(userSessionVO, schoolNumber, schoolNumberSpecified, null);
    }
    
    public VectorByte getSchoolMapBySchoolNumber(UserSessionVO userSessionVO,long schoolNumber,boolean schoolNumberSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://publicportal.rest.powerschool.pearson.com","getSchoolMapBySchoolNumber");
        soapEnvelope.addMapping("http://publicportal.rest.powerschool.pearson.com","userSessionVO",new UserSessionVO().getClass());
        soapReq.addProperty("userSessionVO",userSessionVO);
        soapReq.addProperty("schoolNumber",schoolNumber);
        soapReq.addProperty("schoolNumberSpecified",schoolNumberSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getSchoolMapBySchoolNumber", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getSchoolMapBySchoolNumber", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapPrimitive j = (SoapPrimitive)obj;
                    VectorByte resultVariable = new VectorByte(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getStartStopTimeForAllSectionsAsync(UserSessionVO userSessionVO,VectorInt64 studentIDs,int month,boolean monthSpecified,int year,boolean yearSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getStartStopTimeForAllSectionsAsync(userSessionVO, studentIDs, month, monthSpecified, year, yearSpecified, null);
    }
    
    public void getStartStopTimeForAllSectionsAsync(final UserSessionVO userSessionVO,final VectorInt64 studentIDs,final int month,final boolean monthSpecified,final int year,final boolean yearSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResultsVO>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResultsVO doInBackground(Void... params) {
                return getStartStopTimeForAllSections(userSessionVO, studentIDs, month, monthSpecified, year, yearSpecified, headers);
            }
            @Override
            protected void onPostExecute(ResultsVO result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getStartStopTimeForAllSections", result);
                }
            }
        }.execute();
    }
    
    public ResultsVO getStartStopTimeForAllSections(UserSessionVO userSessionVO,VectorInt64 studentIDs,int month,boolean monthSpecified,int year,boolean yearSpecified){
        return getStartStopTimeForAllSections(userSessionVO, studentIDs, month, monthSpecified, year, yearSpecified, null);
    }
    
    public ResultsVO getStartStopTimeForAllSections(UserSessionVO userSessionVO,VectorInt64 studentIDs,int month,boolean monthSpecified,int year,boolean yearSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://publicportal.rest.powerschool.pearson.com","getStartStopTimeForAllSections");
        soapEnvelope.addMapping("http://publicportal.rest.powerschool.pearson.com","userSessionVO",new UserSessionVO().getClass());
        soapReq.addProperty("userSessionVO",userSessionVO);
        soapReq.addProperty("studentIDs",studentIDs);
        soapReq.addProperty("month",month);
        soapReq.addProperty("monthSpecified",monthSpecified);
        soapReq.addProperty("year",year);
        soapReq.addProperty("yearSpecified",yearSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getStartStopTimeForAllSections", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getStartStopTimeForAllSections", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResultsVO resultVariable =  new ResultsVO (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}

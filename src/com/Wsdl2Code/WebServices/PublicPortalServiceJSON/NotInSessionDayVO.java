package com.Wsdl2Code.WebServices.PublicPortalServiceJSON;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 6/12/2014 1:13:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class NotInSessionDayVO implements KvmSerializable {
    
    public String calType;
    public String calendarDay;
    public boolean calendarDaySpecified;
    public String description;
    public long id;
    public boolean idSpecified;
    public long schoolNumber;
    public boolean schoolNumberSpecified;
    
    public NotInSessionDayVO(){}
    
    public NotInSessionDayVO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("calType"))
        {
            Object obj = soapObject.getProperty("calType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                calType = j.toString();
            }else if (obj!= null && obj instanceof String){
                calType = (String) obj;
            }
        }
        if (soapObject.hasProperty("calendarDay"))
        {
            Object obj = soapObject.getProperty("calendarDay");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                calendarDay = j.toString();
            }else if (obj!= null && obj instanceof String){
                calendarDay = (String) obj;
            }
        }
        if (soapObject.hasProperty("calendarDaySpecified"))
        {
            Object obj = soapObject.getProperty("calendarDaySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                calendarDaySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                calendarDaySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("description"))
        {
            Object obj = soapObject.getProperty("description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                description = j.toString();
            }else if (obj!= null && obj instanceof String){
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("id"))
        {
            Object obj = soapObject.getProperty("id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                id = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("idSpecified"))
        {
            Object obj = soapObject.getProperty("idSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                idSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                idSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("schoolNumber"))
        {
            Object obj = soapObject.getProperty("schoolNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                schoolNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("schoolNumberSpecified"))
        {
            Object obj = soapObject.getProperty("schoolNumberSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolNumberSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                schoolNumberSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return calType;
            case 1:
                return calendarDay;
            case 2:
                return calendarDaySpecified;
            case 3:
                return description;
            case 4:
                return id;
            case 5:
                return idSpecified;
            case 6:
                return schoolNumber;
            case 7:
                return schoolNumberSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 8;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "calType";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "calendarDay";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "calendarDaySpecified";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "description";
                break;
            case 4:
                info.type = Long.class;
                info.name = "id";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "idSpecified";
                break;
            case 6:
                info.type = Long.class;
                info.name = "schoolNumber";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "schoolNumberSpecified";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}

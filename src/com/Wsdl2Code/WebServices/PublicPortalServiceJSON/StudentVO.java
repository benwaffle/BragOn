package com.Wsdl2Code.WebServices.PublicPortalServiceJSON;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 6/12/2014 1:13:10 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class StudentVO implements KvmSerializable {
    
    public String currentGPA;
    public double currentMealBalance;
    public boolean currentMealBalanceSpecified;
    public String currentTerm;
    public long dcid;
    public boolean dcidSpecified;
    public String dob;
    public boolean dobSpecified;
    public String ethnicity;
    public String firstName;
    public String gender;
    public int gradeLevel;
    public boolean gradeLevelSpecified;
    public long id;
    public boolean idSpecified;
    public String lastName;
    public String middleName;
    public String photoDate;
    public boolean photoDateSpecified;
    public double startingMealBalance;
    public boolean startingMealBalanceSpecified;
    
    public StudentVO(){}
    
    public StudentVO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("currentGPA"))
        {
            Object obj = soapObject.getProperty("currentGPA");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                currentGPA = j.toString();
            }else if (obj!= null && obj instanceof String){
                currentGPA = (String) obj;
            }
        }
        if (soapObject.hasProperty("currentMealBalance"))
        {
            Object obj = soapObject.getProperty("currentMealBalance");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                currentMealBalance = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                currentMealBalance = (Double) obj;
            }
        }
        if (soapObject.hasProperty("currentMealBalanceSpecified"))
        {
            Object obj = soapObject.getProperty("currentMealBalanceSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                currentMealBalanceSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                currentMealBalanceSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("currentTerm"))
        {
            Object obj = soapObject.getProperty("currentTerm");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                currentTerm = j.toString();
            }else if (obj!= null && obj instanceof String){
                currentTerm = (String) obj;
            }
        }
        if (soapObject.hasProperty("dcid"))
        {
            Object obj = soapObject.getProperty("dcid");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dcid = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                dcid = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("dcidSpecified"))
        {
            Object obj = soapObject.getProperty("dcidSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dcidSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dcidSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dob"))
        {
            Object obj = soapObject.getProperty("dob");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dob = j.toString();
            }else if (obj!= null && obj instanceof String){
                dob = (String) obj;
            }
        }
        if (soapObject.hasProperty("dobSpecified"))
        {
            Object obj = soapObject.getProperty("dobSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dobSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dobSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ethnicity"))
        {
            Object obj = soapObject.getProperty("ethnicity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                ethnicity = j.toString();
            }else if (obj!= null && obj instanceof String){
                ethnicity = (String) obj;
            }
        }
        if (soapObject.hasProperty("firstName"))
        {
            Object obj = soapObject.getProperty("firstName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                firstName = j.toString();
            }else if (obj!= null && obj instanceof String){
                firstName = (String) obj;
            }
        }
        if (soapObject.hasProperty("gender"))
        {
            Object obj = soapObject.getProperty("gender");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gender = j.toString();
            }else if (obj!= null && obj instanceof String){
                gender = (String) obj;
            }
        }
        if (soapObject.hasProperty("gradeLevel"))
        {
            Object obj = soapObject.getProperty("gradeLevel");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gradeLevel = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                gradeLevel = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("gradeLevelSpecified"))
        {
            Object obj = soapObject.getProperty("gradeLevelSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gradeLevelSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                gradeLevelSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("id"))
        {
            Object obj = soapObject.getProperty("id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                id = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("idSpecified"))
        {
            Object obj = soapObject.getProperty("idSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                idSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                idSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("lastName"))
        {
            Object obj = soapObject.getProperty("lastName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lastName = j.toString();
            }else if (obj!= null && obj instanceof String){
                lastName = (String) obj;
            }
        }
        if (soapObject.hasProperty("middleName"))
        {
            Object obj = soapObject.getProperty("middleName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                middleName = j.toString();
            }else if (obj!= null && obj instanceof String){
                middleName = (String) obj;
            }
        }
        if (soapObject.hasProperty("photoDate"))
        {
            Object obj = soapObject.getProperty("photoDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                photoDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                photoDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("photoDateSpecified"))
        {
            Object obj = soapObject.getProperty("photoDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                photoDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                photoDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("startingMealBalance"))
        {
            Object obj = soapObject.getProperty("startingMealBalance");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                startingMealBalance = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                startingMealBalance = (Double) obj;
            }
        }
        if (soapObject.hasProperty("startingMealBalanceSpecified"))
        {
            Object obj = soapObject.getProperty("startingMealBalanceSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                startingMealBalanceSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                startingMealBalanceSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return currentGPA;
            case 1:
                return currentMealBalance;
            case 2:
                return currentMealBalanceSpecified;
            case 3:
                return currentTerm;
            case 4:
                return dcid;
            case 5:
                return dcidSpecified;
            case 6:
                return dob;
            case 7:
                return dobSpecified;
            case 8:
                return ethnicity;
            case 9:
                return firstName;
            case 10:
                return gender;
            case 11:
                return gradeLevel;
            case 12:
                return gradeLevelSpecified;
            case 13:
                return id;
            case 14:
                return idSpecified;
            case 15:
                return lastName;
            case 16:
                return middleName;
            case 17:
                return photoDate;
            case 18:
                return photoDateSpecified;
            case 19:
                return startingMealBalance;
            case 20:
                return startingMealBalanceSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 21;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "currentGPA";
                break;
            case 1:
                info.type = Double.class;
                info.name = "currentMealBalance";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "currentMealBalanceSpecified";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "currentTerm";
                break;
            case 4:
                info.type = Long.class;
                info.name = "dcid";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dcidSpecified";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dob";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dobSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ethnicity";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "firstName";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "gender";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "gradeLevel";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "gradeLevelSpecified";
                break;
            case 13:
                info.type = Long.class;
                info.name = "id";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "idSpecified";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "lastName";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "middleName";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "photoDate";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "photoDateSpecified";
                break;
            case 19:
                info.type = Double.class;
                info.name = "startingMealBalance";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "startingMealBalanceSpecified";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
